use super::{
    LoxValue,
    TokenType
};

trait Expr
{
}

struct AstPrinter{}
impl Visitor for AstPrinter
{
	fn visit_binary(&self, expr: &Binary){}
	fn visit_grouping(&self, expr: &Grouping){}
	fn visit_literal(&self, expr: &Literal){}
	fn visit_unary(&self, expr: &Unary){}
}

// autogenerated code

trait Visitor
{
	fn visit_binary(&self, expr: &Binary);
	fn visit_grouping(&self, expr: &Grouping);
	fn visit_literal(&self, expr: &Literal);
	fn visit_unary(&self, expr: &Unary);
}

struct Binary
{
	left: Box<dyn Expr>,
	oper: TokenType,
	right: Box<dyn Expr>
}

impl Binary
{
	pub fn visit(&self, visitor: &dyn Visitor)
	{
		visitor.visit_binary(self);
	}
}

struct Grouping
{
	expr: Box<dyn Expr>
}

impl Grouping
{
	pub fn visit(&self, visitor: &dyn Visitor)
	{
		visitor.visit_grouping(self);
	}
}

struct Literal
{
	value: LoxValue
}

impl Literal
{
	pub fn visit(&self, visitor: &dyn Visitor)
	{
		visitor.visit_literal(self);
	}
}

struct Unary
{
	oper: TokenType,
	expr: Box<dyn Expr>
}

impl Unary
{
	pub fn visit(&self, visitor: &dyn Visitor)
	{
		visitor.visit_unary(self);
	}
}
